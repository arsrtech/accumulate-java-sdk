package io.accumulatenetwork.sdk.generated.query;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.accumulatenetwork.sdk.protocol.Marhallable;
import io.accumulatenetwork.sdk.support.Marshaller;
// UnionType: 
// UnionValue: 

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("ResponseMajorEntry")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ResponseMajorEntry implements Marhallable {
	private long majorBlockIndex;
	private java.time.OffsetDateTime majorBlockTime;
	private ResponseMinorEntry[] minorBlocks;

    //
	public long getMajorBlockIndex() {
	    return majorBlockIndex;
	}
	public void setMajorBlockIndex(final long value) {
	    this.majorBlockIndex = value;
	}

	public ResponseMajorEntry majorBlockIndex(final long value) {
	    setMajorBlockIndex(value);
	    return this;
	}
	public java.time.OffsetDateTime getMajorBlockTime() {
	    return majorBlockTime;
	}
	public void setMajorBlockTime(final java.time.OffsetDateTime value) {
	    this.majorBlockTime = value;
	}

	public ResponseMajorEntry majorBlockTime(final java.time.OffsetDateTime value) {
	    setMajorBlockTime(value);
	    return this;
	}
	public ResponseMinorEntry[] getMinorBlocks() {
	    return minorBlocks;
	}
	public void setMinorBlocks(final ResponseMinorEntry[] value) {
	    this.minorBlocks = value;
	}

	public ResponseMajorEntry minorBlocks(final ResponseMinorEntry[] value) {
	    setMinorBlocks(value);
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        if (!(this.majorBlockIndex == 0)) {
            marshaller.writeUint(1, this.majorBlockIndex);
        }
        if (!(this.majorBlockTime == null)) {
            marshaller.writeTime(2, this.majorBlockTime);
        }
        if (!(this.minorBlocks == null)) {
            marshaller.writeValue(3, minorBlocks);
        }
        return marshaller.array();
    }
}
