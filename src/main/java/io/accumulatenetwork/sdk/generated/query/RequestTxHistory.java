package io.accumulatenetwork.sdk.generated.query;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.accumulatenetwork.sdk.protocol.Marhallable;
import io.accumulatenetwork.sdk.protocol.Url;
import io.accumulatenetwork.sdk.support.Marshaller;
// UnionType: QueryType
// UnionValue: TxHistory

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("RequestTxHistory")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class RequestTxHistory implements Marhallable {
	public final QueryType type = QueryType.TX_HISTORY;
	private Url account;
	private long start;
	private long limit;
	private boolean scratch;

    //
	public Url getAccount() {
	    return account;
	}
	public void setAccount(final Url value) {
	    this.account = value;
	}

	public RequestTxHistory account(final Url value) {
	    setAccount(value);
	    return this;
	}
	public RequestTxHistory account(final String value) {
	    setAccount(Url.parse(value));
	    return this;
	}
	public long getStart() {
	    return start;
	}
	public void setStart(final long value) {
	    this.start = value;
	}

	public RequestTxHistory start(final long value) {
	    setStart(value);
	    return this;
	}
	public long getLimit() {
	    return limit;
	}
	public void setLimit(final long value) {
	    this.limit = value;
	}

	public RequestTxHistory limit(final long value) {
	    setLimit(value);
	    return this;
	}
	public boolean getScratch() {
	    return scratch;
	}
	public void setScratch(final boolean value) {
	    this.scratch = value;
	}

	public RequestTxHistory scratch(final boolean value) {
	    setScratch(value);
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        marshaller.writeValue(1, type);
        if (!(this.account == null)) {
            marshaller.writeUrl(2, this.account);
        }
        if (!(this.start == 0)) {
            marshaller.writeUint(3, this.start);
        }
        if (!(this.limit == 0)) {
            marshaller.writeUint(4, this.limit);
        }
        if (!(!this.scratch)) {
            marshaller.writeBool(5, this.scratch);
        }
        return marshaller.array();
    }
}
