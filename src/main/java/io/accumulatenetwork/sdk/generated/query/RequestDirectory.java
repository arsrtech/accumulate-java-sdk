package io.accumulatenetwork.sdk.generated.query;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.accumulatenetwork.sdk.protocol.Marhallable;
import io.accumulatenetwork.sdk.protocol.Url;
import io.accumulatenetwork.sdk.support.Marshaller;
// UnionType: QueryType
// UnionValue: DirectoryUrl

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("RequestDirectory")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class RequestDirectory implements Marhallable {
	public final QueryType type = QueryType.DIRECTORY_URL;
	private Url url;
	private long start;
	private long limit;
	private boolean expandChains;

    //
	public Url getUrl() {
	    return url;
	}
	public void setUrl(final Url value) {
	    this.url = value;
	}

	public RequestDirectory url(final Url value) {
	    setUrl(value);
	    return this;
	}
	public RequestDirectory url(final String value) {
	    setUrl(Url.parse(value));
	    return this;
	}
	public long getStart() {
	    return start;
	}
	public void setStart(final long value) {
	    this.start = value;
	}

	public RequestDirectory start(final long value) {
	    setStart(value);
	    return this;
	}
	public long getLimit() {
	    return limit;
	}
	public void setLimit(final long value) {
	    this.limit = value;
	}

	public RequestDirectory limit(final long value) {
	    setLimit(value);
	    return this;
	}
	public boolean getExpandChains() {
	    return expandChains;
	}
	public void setExpandChains(final boolean value) {
	    this.expandChains = value;
	}

	public RequestDirectory expandChains(final boolean value) {
	    setExpandChains(value);
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        marshaller.writeValue(1, type);
        if (!(this.url == null)) {
            marshaller.writeUrl(2, this.url);
        }
        if (!(this.start == 0)) {
            marshaller.writeUint(3, this.start);
        }
        if (!(this.limit == 0)) {
            marshaller.writeUint(4, this.limit);
        }
        if (!(!this.expandChains)) {
            marshaller.writeBool(5, this.expandChains);
        }
        return marshaller.array();
    }
}
