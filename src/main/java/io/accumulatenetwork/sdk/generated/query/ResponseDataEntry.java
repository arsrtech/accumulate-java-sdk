package io.accumulatenetwork.sdk.generated.query;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.accumulatenetwork.sdk.protocol.DataEntry;
import io.accumulatenetwork.sdk.protocol.Marhallable;
import io.accumulatenetwork.sdk.support.Marshaller;
import io.accumulatenetwork.sdk.support.serializers.HexDeserializer;
import io.accumulatenetwork.sdk.support.serializers.HexSerializer;
// UnionType: 
// UnionValue: 

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("ResponseDataEntry")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ResponseDataEntry implements Marhallable {
	private byte[] entryHash;
	private DataEntry entry;

    //
	@JsonDeserialize(using = HexDeserializer.class)
	public byte[] getEntryHash() {
	    return entryHash;
	}
	@JsonSerialize(using = HexSerializer.class)
	public void setEntryHash(final byte[] value) {
	    this.entryHash = value;
	}

	public ResponseDataEntry entryHash(final byte[] value) {
	    setEntryHash(value);
	    return this;
	}
	public ResponseDataEntry entryHash(final String value) {
		try {
			setEntryHash(io.accumulatenetwork.sdk.commons.codec.binary.Hex.decodeHex(value));
		} catch (io.accumulatenetwork.sdk.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}
	public DataEntry getEntry() {
	    return entry;
	}
	public void setEntry(final DataEntry value) {
	    this.entry = value;
	}

	public ResponseDataEntry entry(final DataEntry value) {
	    setEntry(value);
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        if (!(this.entryHash == null || this.entryHash.length == 0)) {
            marshaller.writeHash(1, this.entryHash);
        }
        if (!(this.entry == null)) {
            marshaller.writeValue(2, entry);
        }
        return marshaller.array();
    }
}
