package io.accumulatenetwork.sdk.generated.query;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.accumulatenetwork.sdk.protocol.Marhallable;
import io.accumulatenetwork.sdk.protocol.Url;
import io.accumulatenetwork.sdk.support.Marshaller;
// UnionType: QueryType
// UnionValue: MinorBlocks

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("RequestMinorBlocks")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class RequestMinorBlocks implements Marhallable {
	public final QueryType type = QueryType.MINOR_BLOCKS;
	private Url account;
	private long start;
	private long limit;
	private TxFetchMode txFetchMode;
	private BlockFilterMode blockFilterMode;

    //
	public Url getAccount() {
	    return account;
	}
	public void setAccount(final Url value) {
	    this.account = value;
	}

	public RequestMinorBlocks account(final Url value) {
	    setAccount(value);
	    return this;
	}
	public RequestMinorBlocks account(final String value) {
	    setAccount(Url.parse(value));
	    return this;
	}
	public long getStart() {
	    return start;
	}
	public void setStart(final long value) {
	    this.start = value;
	}

	public RequestMinorBlocks start(final long value) {
	    setStart(value);
	    return this;
	}
	public long getLimit() {
	    return limit;
	}
	public void setLimit(final long value) {
	    this.limit = value;
	}

	public RequestMinorBlocks limit(final long value) {
	    setLimit(value);
	    return this;
	}
	public TxFetchMode getTxFetchMode() {
	    return txFetchMode;
	}
	public void setTxFetchMode(final TxFetchMode value) {
	    this.txFetchMode = value;
	}

	public RequestMinorBlocks txFetchMode(final TxFetchMode value) {
	    setTxFetchMode(value);
	    return this;
	}
	public BlockFilterMode getBlockFilterMode() {
	    return blockFilterMode;
	}
	public void setBlockFilterMode(final BlockFilterMode value) {
	    this.blockFilterMode = value;
	}

	public RequestMinorBlocks blockFilterMode(final BlockFilterMode value) {
	    setBlockFilterMode(value);
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        marshaller.writeValue(1, type);
        if (!(this.account == null)) {
            marshaller.writeUrl(2, this.account);
        }
        if (!(this.start == 0)) {
            marshaller.writeUint(3, this.start);
        }
        if (!(this.limit == 0)) {
            marshaller.writeUint(4, this.limit);
        }
        if (!(this.txFetchMode == null)) {
            marshaller.writeValue(5, txFetchMode);
        }
        if (!(this.blockFilterMode == null)) {
            marshaller.writeValue(6, blockFilterMode);
        }
        return marshaller.array();
    }
}
