package io.accumulatenetwork.sdk.generated.query;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.accumulatenetwork.sdk.generated.protocol.Envelope;
import io.accumulatenetwork.sdk.generated.protocol.TransactionStatus;
import io.accumulatenetwork.sdk.protocol.Marhallable;
import io.accumulatenetwork.sdk.protocol.TxID;
import io.accumulatenetwork.sdk.support.Marshaller;
import io.accumulatenetwork.sdk.support.serializers.Hex2DDeserializer;
import io.accumulatenetwork.sdk.support.serializers.Hex2DSerializer;
// UnionType: 
// UnionValue: 

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("ResponseByTxId")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ResponseByTxId implements Marhallable {
	private TxID txId;
	private Envelope envelope;
	private TransactionStatus status;
	private TxID[] produced;
	private long height;
	private byte[][] chainState;
	private TxReceipt[] receipts;
	private SignatureSet[] signers;

    //
	public TxID getTxId() {
	    return txId;
	}
	public void setTxId(final TxID value) {
	    this.txId = value;
	}

	public ResponseByTxId txId(final TxID value) {
	    setTxId(value);
	    return this;
	}
	public Envelope getEnvelope() {
	    return envelope;
	}
	public void setEnvelope(final Envelope value) {
	    this.envelope = value;
	}

	public ResponseByTxId envelope(final Envelope value) {
	    setEnvelope(value);
	    return this;
	}
	public TransactionStatus getStatus() {
	    return status;
	}
	public void setStatus(final TransactionStatus value) {
	    this.status = value;
	}

	public ResponseByTxId status(final TransactionStatus value) {
	    setStatus(value);
	    return this;
	}
	public TxID[] getProduced() {
	    return produced;
	}
	public void setProduced(final TxID[] value) {
	    this.produced = value;
	}

	public ResponseByTxId produced(final TxID[] value) {
	    setProduced(value);
	    return this;
	}
	public long getHeight() {
	    return height;
	}
	public void setHeight(final long value) {
	    this.height = value;
	}

	public ResponseByTxId height(final long value) {
	    setHeight(value);
	    return this;
	}
	@JsonDeserialize(using = Hex2DDeserializer.class)
	public byte[][] getChainState() {
	    return chainState;
	}
	@JsonSerialize(using = Hex2DSerializer.class)
	public void setChainState(final byte[][] value) {
	    this.chainState = value;
	}

	public ResponseByTxId chainState(final byte[][] value) {
	    setChainState(value);
	    return this;
	}
	public TxReceipt[] getReceipts() {
	    return receipts;
	}
	public void setReceipts(final TxReceipt[] value) {
	    this.receipts = value;
	}

	public ResponseByTxId receipts(final TxReceipt[] value) {
	    setReceipts(value);
	    return this;
	}
	public SignatureSet[] getSigners() {
	    return signers;
	}
	public void setSigners(final SignatureSet[] value) {
	    this.signers = value;
	}

	public ResponseByTxId signers(final SignatureSet[] value) {
	    setSigners(value);
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        if (!(this.txId == null)) {
            marshaller.writeTxid(1, this.txId);
        }
        if (!(this.envelope == null)) {
            marshaller.writeValue(2, envelope);
        }
        if (!(this.status == null)) {
            marshaller.writeValue(3, status);
        }
        if (!(this.produced == null || this.produced.length == 0)) {
            marshaller.writeTxid(4, this.produced);
        }
        marshaller.writeUint(5, this.height);
        if (!(this.chainState == null || this.chainState.length == 0)) {
            marshaller.writeBytes(6, this.chainState);
        }
        if (!(this.receipts == null)) {
            marshaller.writeValue(7, receipts);
        }
        if (!(this.signers == null)) {
            marshaller.writeValue(8, signers);
        }
        return marshaller.array();
    }
}
