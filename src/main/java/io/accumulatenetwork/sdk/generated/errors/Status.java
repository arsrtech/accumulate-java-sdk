package io.accumulatenetwork.sdk.generated.errors;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.JsonNode;
import io.accumulatenetwork.sdk.protocol.IntValueEnum;

public enum Status implements IntValueEnum {
    OK(200, "ok"),
    DELIVERED(201, "delivered"),
    PENDING(202, "pending"),
    REMOTE(203, "remote"),
    WRONG_PARTITION(301, "wrongPartition"),
    BAD_REQUEST(400, "badRequest"),
    UNAUTHENTICATED(401, "unauthenticated"),
    INSUFFICIENT_CREDITS(402, "insufficientCredits"),
    UNAUTHORIZED(403, "unauthorized"),
    NOT_FOUND(404, "notFound"),
    NOT_ALLOWED(405, "notAllowed"),
    CONFLICT(409, "conflict"),
    BAD_SIGNER_VERSION(411, "badSignerVersion"),
    BAD_TIMESTAMP(412, "badTimestamp"),
    BAD_URL_LENGTH(413, "badUrlLength"),
    INTERNAL_ERROR(500, "internalError"),
    UNKNOWN_ERROR(501, "unknownError"),
    ENCODING_ERROR(502, "encodingError"),
    FATAL_ERROR(503, "fatalError");

    private final int value;
    private final String apiName;

    Status(final int value, final String apiName) {
        this.value = value;
        this.apiName = apiName;
    }

    public int getValue() {
        return this.value;
    }

    @JsonValue
    public String getApiName() {
        return this.apiName;
    }

    public String toString() {
        return this.apiName;
    }

    public static Status fromValue(final int value) {
        for (final var type : values()) {
            if (value == type.ordinal()) {
                return type;
            }
        }
        throw new RuntimeException(String.format("%d is not a valid TransactionType", value));
    }

    public static Status fromApiName(final String name) {
        for (final var type : values()) {
            if (name != null && name.equalsIgnoreCase(type.apiName)) {
                return type;
            }
        }
        throw new RuntimeException(String.format("'%s' is not a valid TransactionType", name));
    }

    @JsonCreator
    public static Status fromJsonNode(final JsonNode jsonNode) {
        for (final var type : values()) {
            if (jsonNode.isTextual() && jsonNode.asText().equalsIgnoreCase(type.apiName)) {
                return type;
            }
            if (jsonNode.isNumber() && jsonNode.asInt() == type.ordinal()) {
                return type;
            }
        }
        throw new RuntimeException(String.format("'%s' is not a valid TransactionType", jsonNode.toPrettyString()));
    }
}
