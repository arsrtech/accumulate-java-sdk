package io.accumulatenetwork.sdk.generated.core;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.accumulatenetwork.sdk.generated.protocol.AcmeOracle;
import io.accumulatenetwork.sdk.generated.protocol.NetworkDefinition;
import io.accumulatenetwork.sdk.generated.protocol.NetworkGlobals;
import io.accumulatenetwork.sdk.generated.protocol.RoutingTable;
import io.accumulatenetwork.sdk.protocol.Marhallable;
import io.accumulatenetwork.sdk.support.Marshaller;
// UnionType: 
// UnionValue: 

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("GlobalValues")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class GlobalValues implements Marhallable {
	private AcmeOracle oracle;
	private NetworkGlobals globals;
	private NetworkDefinition network;
	private RoutingTable routing;

    //
	public AcmeOracle getOracle() {
	    return oracle;
	}
	public void setOracle(final AcmeOracle value) {
	    this.oracle = value;
	}

	public GlobalValues oracle(final AcmeOracle value) {
	    setOracle(value);
	    return this;
	}
	public NetworkGlobals getGlobals() {
	    return globals;
	}
	public void setGlobals(final NetworkGlobals value) {
	    this.globals = value;
	}

	public GlobalValues globals(final NetworkGlobals value) {
	    setGlobals(value);
	    return this;
	}
	public NetworkDefinition getNetwork() {
	    return network;
	}
	public void setNetwork(final NetworkDefinition value) {
	    this.network = value;
	}

	public GlobalValues network(final NetworkDefinition value) {
	    setNetwork(value);
	    return this;
	}
	public RoutingTable getRouting() {
	    return routing;
	}
	public void setRouting(final RoutingTable value) {
	    this.routing = value;
	}

	public GlobalValues routing(final RoutingTable value) {
	    setRouting(value);
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        if (!(this.oracle == null)) {
            marshaller.writeValue(1, oracle);
        }
        if (!(this.globals == null)) {
            marshaller.writeValue(2, globals);
        }
        if (!(this.network == null)) {
            marshaller.writeValue(3, network);
        }
        if (!(this.routing == null)) {
            marshaller.writeValue(4, routing);
        }
        return marshaller.array();
    }
}
