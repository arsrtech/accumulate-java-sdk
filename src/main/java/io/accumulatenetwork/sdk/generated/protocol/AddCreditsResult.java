package io.accumulatenetwork.sdk.generated.protocol;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.accumulatenetwork.sdk.protocol.TransactionResult;
import io.accumulatenetwork.sdk.support.Marshaller;
import io.accumulatenetwork.sdk.support.serializers.GoBigIntDeserializer;
import io.accumulatenetwork.sdk.support.serializers.GoBigIntSerializer;
// UnionType: TransactionType
// UnionValue: AddCredits

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("AddCreditsResult")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class AddCreditsResult implements TransactionResult {
	public final TransactionType type = TransactionType.ADD_CREDITS;
	private java.math.BigInteger amount;
	private long credits;
	private long oracle;

    //
	@JsonDeserialize(using = GoBigIntDeserializer.class)
	public java.math.BigInteger getAmount() {
	    return amount;
	}
	@JsonSerialize(using = GoBigIntSerializer.class)
	public void setAmount(final java.math.BigInteger value) {
	    this.amount = value;
	}

	public AddCreditsResult amount(final java.math.BigInteger value) {
	    setAmount(value);
	    return this;
	}
	public long getCredits() {
	    return credits;
	}
	public void setCredits(final long value) {
	    this.credits = value;
	}

	public AddCreditsResult credits(final long value) {
	    setCredits(value);
	    return this;
	}
	public long getOracle() {
	    return oracle;
	}
	public void setOracle(final long value) {
	    this.oracle = value;
	}

	public AddCreditsResult oracle(final long value) {
	    setOracle(value);
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        marshaller.writeValue(1, type);
        if (!((this.amount).equals(java.math.BigInteger.ZERO))) {
            marshaller.writeBigInt(2, this.amount);
        }
        if (!(this.credits == 0)) {
            marshaller.writeUint(3, this.credits);
        }
        if (!(this.oracle == 0)) {
            marshaller.writeUint(4, this.oracle);
        }
        return marshaller.array();
    }
}
