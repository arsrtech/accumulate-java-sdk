package io.accumulatenetwork.sdk.generated.protocol;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.accumulatenetwork.sdk.protocol.Marhallable;
import io.accumulatenetwork.sdk.protocol.Signature;
import io.accumulatenetwork.sdk.support.Marshaller;
import io.accumulatenetwork.sdk.support.serializers.HexDeserializer;
import io.accumulatenetwork.sdk.support.serializers.HexSerializer;
// UnionType: 
// UnionValue: 

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("Envelope")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Envelope implements Marhallable {
	private Signature[] signatures;
	private byte[] txHash;
	private Transaction[] transaction;

    //
	public Signature[] getSignatures() {
	    return signatures;
	}
	public void setSignatures(final Signature[] value) {
	    this.signatures = value;
	}

	public Envelope signatures(final Signature[] value) {
	    setSignatures(value);
	    return this;
	}
	@JsonDeserialize(using = HexDeserializer.class)
	public byte[] getTxHash() {
	    return txHash;
	}
	@JsonSerialize(using = HexSerializer.class)
	public void setTxHash(final byte[] value) {
	    this.txHash = value;
	}

	public Envelope txHash(final byte[] value) {
	    setTxHash(value);
	    return this;
	}
	public Envelope txHash(final String value) {
		try {
			setTxHash(io.accumulatenetwork.sdk.commons.codec.binary.Hex.decodeHex(value));
		} catch (io.accumulatenetwork.sdk.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}
	public Transaction[] getTransaction() {
	    return transaction;
	}
	public void setTransaction(final Transaction[] value) {
	    this.transaction = value;
	}

	public Envelope transaction(final Transaction[] value) {
	    setTransaction(value);
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        if (!(this.signatures == null)) {
            marshaller.writeValue(1, signatures);
        }
        if (!(this.txHash == null || this.txHash.length == 0)) {
            marshaller.writeBytes(2, this.txHash);
        }
        if (!(this.transaction == null)) {
            marshaller.writeValue(3, transaction);
        }
        return marshaller.array();
    }
}
