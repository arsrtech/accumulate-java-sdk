package io.accumulatenetwork.sdk.generated.protocol;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.accumulatenetwork.sdk.protocol.TransactionResult;
import io.accumulatenetwork.sdk.protocol.Url;
import io.accumulatenetwork.sdk.support.Marshaller;
import io.accumulatenetwork.sdk.support.serializers.HexDeserializer;
import io.accumulatenetwork.sdk.support.serializers.HexSerializer;
// UnionType: TransactionType
// UnionValue: WriteData

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("WriteDataResult")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class WriteDataResult implements TransactionResult {
	public final TransactionType type = TransactionType.WRITE_DATA;
	private byte[] entryHash;
	private Url accountUrl;
	private byte[] accountID;

    //
	@JsonDeserialize(using = HexDeserializer.class)
	public byte[] getEntryHash() {
	    return entryHash;
	}
	@JsonSerialize(using = HexSerializer.class)
	public void setEntryHash(final byte[] value) {
	    this.entryHash = value;
	}

	public WriteDataResult entryHash(final byte[] value) {
	    setEntryHash(value);
	    return this;
	}
	public WriteDataResult entryHash(final String value) {
		try {
			setEntryHash(io.accumulatenetwork.sdk.commons.codec.binary.Hex.decodeHex(value));
		} catch (io.accumulatenetwork.sdk.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}
	public Url getAccountUrl() {
	    return accountUrl;
	}
	public void setAccountUrl(final Url value) {
	    this.accountUrl = value;
	}

	public WriteDataResult accountUrl(final Url value) {
	    setAccountUrl(value);
	    return this;
	}
	public WriteDataResult accountUrl(final String value) {
	    setAccountUrl(Url.parse(value));
	    return this;
	}
	@JsonDeserialize(using = HexDeserializer.class)
	public byte[] getAccountID() {
	    return accountID;
	}
	@JsonSerialize(using = HexSerializer.class)
	public void setAccountID(final byte[] value) {
	    this.accountID = value;
	}

	public WriteDataResult accountID(final byte[] value) {
	    setAccountID(value);
	    return this;
	}
	public WriteDataResult accountID(final String value) {
		try {
			setAccountID(io.accumulatenetwork.sdk.commons.codec.binary.Hex.decodeHex(value));
		} catch (io.accumulatenetwork.sdk.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        marshaller.writeValue(1, type);
        if (!(this.entryHash == null || this.entryHash.length == 0)) {
            marshaller.writeHash(2, this.entryHash);
        }
        if (!(this.accountUrl == null)) {
            marshaller.writeUrl(3, this.accountUrl);
        }
        if (!(this.accountID == null || this.accountID.length == 0)) {
            marshaller.writeBytes(4, this.accountID);
        }
        return marshaller.array();
    }
}
