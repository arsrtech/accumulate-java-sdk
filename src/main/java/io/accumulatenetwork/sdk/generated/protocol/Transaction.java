package io.accumulatenetwork.sdk.generated.protocol;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.accumulatenetwork.sdk.protocol.Marhallable;
import io.accumulatenetwork.sdk.protocol.TransactionBody;
import io.accumulatenetwork.sdk.support.Marshaller;
import io.accumulatenetwork.sdk.support.serializers.HexDeserializer;
import io.accumulatenetwork.sdk.support.serializers.HexSerializer;
// UnionType: 
// UnionValue: 

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("Transaction")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Transaction implements Marhallable {
	private TransactionHeader header;
	private TransactionBody body;
	@JsonIgnore
	private byte[] hash;

    //
	public TransactionHeader getHeader() {
	    return header;
	}
	public void setHeader(final TransactionHeader value) {
	    this.header = value;
	}

	public Transaction header(final TransactionHeader value) {
	    setHeader(value);
	    return this;
	}
	public TransactionBody getBody() {
	    return body;
	}
	public void setBody(final TransactionBody value) {
	    this.body = value;
	}

	public Transaction body(final TransactionBody value) {
	    setBody(value);
	    return this;
	}
	@JsonIgnore
	@JsonDeserialize(using = HexDeserializer.class)
	public byte[] gethash() {
	    return hash;
	}
	@JsonSerialize(using = HexSerializer.class)
	public void sethash(final byte[] value) {
	    this.hash = value;
	}

	public Transaction hash(final byte[] value) {
	    sethash(value);
	    return this;
	}
	public Transaction hash(final String value) {
		try {
			sethash(io.accumulatenetwork.sdk.commons.codec.binary.Hex.decodeHex(value));
		} catch (io.accumulatenetwork.sdk.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        if (!(this.header == null)) {
            marshaller.writeValue(1, header);
        }
        if (!(this.body == null)) {
            marshaller.writeValue(2, body);
        }
        return marshaller.array();
    }
}
