package io.accumulatenetwork.sdk.generated.protocol;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.JsonNode;
import io.accumulatenetwork.sdk.protocol.IntValueEnum;

public enum TransactionType implements IntValueEnum {
    UNKNOWN(0, "unknown"),
    CREATE_IDENTITY(1, "createIdentity"),
    CREATE_TOKEN_ACCOUNT(2, "createTokenAccount"),
    SEND_TOKENS(3, "sendTokens"),
    CREATE_DATA_ACCOUNT(4, "createDataAccount"),
    WRITE_DATA(5, "writeData"),
    WRITE_DATA_TO(6, "writeDataTo"),
    ACME_FAUCET(7, "acmeFaucet"),
    CREATE_TOKEN(8, "createToken"),
    ISSUE_TOKENS(9, "issueTokens"),
    BURN_TOKENS(10, "burnTokens"),
    CREATE_LITE_TOKEN_ACCOUNT(11, "createLiteTokenAccount"),
    CREATE_KEY_PAGE(12, "createKeyPage"),
    CREATE_KEY_BOOK(13, "createKeyBook"),
    ADD_CREDITS(14, "addCredits"),
    UPDATE_KEY_PAGE(15, "updateKeyPage"),
    LOCK_ACCOUNT(16, "lockAccount"),
    UPDATE_ACCOUNT_AUTH(21, "updateAccountAuth"),
    UPDATE_KEY(22, "updateKey"),
    REMOTE(48, "remote"),
    SYNTHETIC_CREATE_IDENTITY(49, "syntheticCreateIdentity"),
    SYNTHETIC_WRITE_DATA(50, "syntheticWriteData"),
    SYNTHETIC_DEPOSIT_TOKENS(51, "syntheticDepositTokens"),
    SYNTHETIC_DEPOSIT_CREDITS(52, "syntheticDepositCredits"),
    SYNTHETIC_BURN_TOKENS(53, "syntheticBurnTokens"),
    SYNTHETIC_FORWARD_TRANSACTION(54, "syntheticForwardTransaction"),
    SYSTEM_GENESIS(96, "systemGenesis"),
    DIRECTORY_ANCHOR(97, "directoryAnchor"),
    BLOCK_VALIDATOR_ANCHOR(98, "blockValidatorAnchor"),
    SYSTEM_WRITE_DATA(99, "systemWriteData");

    private final int value;
    private final String apiName;

    TransactionType(final int value, final String apiName) {
        this.value = value;
        this.apiName = apiName;
    }

    public int getValue() {
        return this.value;
    }

    @JsonValue
    public String getApiName() {
        return this.apiName;
    }

    public String toString() {
        return this.apiName;
    }

    public static TransactionType fromValue(final int value) {
        for (final var type : values()) {
            if (value == type.ordinal()) {
                return type;
            }
        }
        throw new RuntimeException(String.format("%d is not a valid TransactionType", value));
    }

    public static TransactionType fromApiName(final String name) {
        for (final var type : values()) {
            if (name != null && name.equalsIgnoreCase(type.apiName)) {
                return type;
            }
        }
        throw new RuntimeException(String.format("'%s' is not a valid TransactionType", name));
    }

    @JsonCreator
    public static TransactionType fromJsonNode(final JsonNode jsonNode) {
        for (final var type : values()) {
            if (jsonNode.isTextual() && jsonNode.asText().equalsIgnoreCase(type.apiName)) {
                return type;
            }
            if (jsonNode.isNumber() && jsonNode.asInt() == type.ordinal()) {
                return type;
            }
        }
        throw new RuntimeException(String.format("'%s' is not a valid TransactionType", jsonNode.toPrettyString()));
    }
}
