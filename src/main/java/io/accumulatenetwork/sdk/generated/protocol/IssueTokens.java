package io.accumulatenetwork.sdk.generated.protocol;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.accumulatenetwork.sdk.protocol.TransactionBody;
import io.accumulatenetwork.sdk.protocol.Url;
import io.accumulatenetwork.sdk.support.Marshaller;
import io.accumulatenetwork.sdk.support.serializers.GoBigIntDeserializer;
import io.accumulatenetwork.sdk.support.serializers.GoBigIntSerializer;
// UnionType: TransactionType
// UnionValue: IssueTokens

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("IssueTokens")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class IssueTokens implements TransactionBody {
	public final TransactionType type = TransactionType.ISSUE_TOKENS;
	private Url recipient;
	private java.math.BigInteger amount;
	private TokenRecipient[] to;

    //
	public Url getRecipient() {
	    return recipient;
	}
	public void setRecipient(final Url value) {
	    this.recipient = value;
	}

	public IssueTokens recipient(final Url value) {
	    setRecipient(value);
	    return this;
	}
	public IssueTokens recipient(final String value) {
	    setRecipient(Url.parse(value));
	    return this;
	}
	@JsonDeserialize(using = GoBigIntDeserializer.class)
	public java.math.BigInteger getAmount() {
	    return amount;
	}
	@JsonSerialize(using = GoBigIntSerializer.class)
	public void setAmount(final java.math.BigInteger value) {
	    this.amount = value;
	}

	public IssueTokens amount(final java.math.BigInteger value) {
	    setAmount(value);
	    return this;
	}
	public TokenRecipient[] getTo() {
	    return to;
	}
	public void setTo(final TokenRecipient[] value) {
	    this.to = value;
	}

	public IssueTokens to(final TokenRecipient[] value) {
	    setTo(value);
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        marshaller.writeValue(1, type);
        if (!(this.recipient == null)) {
            marshaller.writeUrl(2, this.recipient);
        }
        if (!((this.amount).equals(java.math.BigInteger.ZERO))) {
            marshaller.writeBigInt(3, this.amount);
        }
        if (!(this.to == null)) {
            marshaller.writeValue(4, to);
        }
        return marshaller.array();
    }
}
