package io.accumulatenetwork.sdk.generated.protocol;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.accumulatenetwork.sdk.protocol.Signature;
import io.accumulatenetwork.sdk.protocol.Url;
import io.accumulatenetwork.sdk.support.Marshaller;
import io.accumulatenetwork.sdk.support.serializers.HexDeserializer;
import io.accumulatenetwork.sdk.support.serializers.HexSerializer;
// UnionType: SignatureType
// UnionValue: ETH

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("ETHSignature")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ETHSignature implements Signature {
	public final SignatureType type = SignatureType.ETH;
	private byte[] publicKey;
	private byte[] signature;
	private Url signer;
	private long signerVersion;
	private long timestamp;
	private VoteType vote;
	private byte[] transactionHash;

    //
	@JsonDeserialize(using = HexDeserializer.class)
	public byte[] getPublicKey() {
	    return publicKey;
	}
	@JsonSerialize(using = HexSerializer.class)
	public void setPublicKey(final byte[] value) {
	    this.publicKey = value;
	}

	public ETHSignature publicKey(final byte[] value) {
	    setPublicKey(value);
	    return this;
	}
	public ETHSignature publicKey(final String value) {
		try {
			setPublicKey(io.accumulatenetwork.sdk.commons.codec.binary.Hex.decodeHex(value));
		} catch (io.accumulatenetwork.sdk.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}
	@JsonDeserialize(using = HexDeserializer.class)
	public byte[] getSignature() {
	    return signature;
	}
	@JsonSerialize(using = HexSerializer.class)
	public void setSignature(final byte[] value) {
	    this.signature = value;
	}

	public ETHSignature signature(final byte[] value) {
	    setSignature(value);
	    return this;
	}
	public ETHSignature signature(final String value) {
		try {
			setSignature(io.accumulatenetwork.sdk.commons.codec.binary.Hex.decodeHex(value));
		} catch (io.accumulatenetwork.sdk.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}
	public Url getSigner() {
	    return signer;
	}
	public void setSigner(final Url value) {
	    this.signer = value;
	}

	public ETHSignature signer(final Url value) {
	    setSigner(value);
	    return this;
	}
	public ETHSignature signer(final String value) {
	    setSigner(Url.parse(value));
	    return this;
	}
	public long getSignerVersion() {
	    return signerVersion;
	}
	public void setSignerVersion(final long value) {
	    this.signerVersion = value;
	}

	public ETHSignature signerVersion(final long value) {
	    setSignerVersion(value);
	    return this;
	}
	public long getTimestamp() {
	    return timestamp;
	}
	public void setTimestamp(final long value) {
	    this.timestamp = value;
	}

	public ETHSignature timestamp(final long value) {
	    setTimestamp(value);
	    return this;
	}
	public VoteType getVote() {
	    return vote;
	}
	public void setVote(final VoteType value) {
	    this.vote = value;
	}

	public ETHSignature vote(final VoteType value) {
	    setVote(value);
	    return this;
	}
	@JsonDeserialize(using = HexDeserializer.class)
	public byte[] getTransactionHash() {
	    return transactionHash;
	}
	@JsonSerialize(using = HexSerializer.class)
	public void setTransactionHash(final byte[] value) {
	    this.transactionHash = value;
	}

	public ETHSignature transactionHash(final byte[] value) {
	    setTransactionHash(value);
	    return this;
	}
	public ETHSignature transactionHash(final String value) {
		try {
			setTransactionHash(io.accumulatenetwork.sdk.commons.codec.binary.Hex.decodeHex(value));
		} catch (io.accumulatenetwork.sdk.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        marshaller.writeValue(1, type);
        if (!(this.publicKey == null || this.publicKey.length == 0)) {
            marshaller.writeBytes(2, this.publicKey);
        }
        if (!(this.signature == null || this.signature.length == 0)) {
            marshaller.writeBytes(3, this.signature);
        }
        if (!(this.signer == null)) {
            marshaller.writeUrl(4, this.signer);
        }
        if (!(this.signerVersion == 0)) {
            marshaller.writeUint(5, this.signerVersion);
        }
        if (!(this.timestamp == 0)) {
            marshaller.writeUint(6, this.timestamp);
        }
        if (!(this.vote == null)) {
            marshaller.writeValue(7, vote);
        }
        if (!(this.transactionHash == null || this.transactionHash.length == 0)) {
            marshaller.writeHash(8, this.transactionHash);
        }
        return marshaller.array();
    }
}
