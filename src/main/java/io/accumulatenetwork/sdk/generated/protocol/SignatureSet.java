package io.accumulatenetwork.sdk.generated.protocol;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.accumulatenetwork.sdk.protocol.Signature;
import io.accumulatenetwork.sdk.protocol.Url;
import io.accumulatenetwork.sdk.support.Marshaller;
import io.accumulatenetwork.sdk.support.serializers.HexDeserializer;
import io.accumulatenetwork.sdk.support.serializers.HexSerializer;
// UnionType: SignatureType
// UnionValue: Set

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("SignatureSet")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SignatureSet implements Signature {
	public final SignatureType type = SignatureType.SET;
	private VoteType vote;
	private Url signer;
	private byte[] transactionHash;
	private Signature[] signatures;

    //
	public VoteType getVote() {
	    return vote;
	}
	public void setVote(final VoteType value) {
	    this.vote = value;
	}

	public SignatureSet vote(final VoteType value) {
	    setVote(value);
	    return this;
	}
	public Url getSigner() {
	    return signer;
	}
	public void setSigner(final Url value) {
	    this.signer = value;
	}

	public SignatureSet signer(final Url value) {
	    setSigner(value);
	    return this;
	}
	public SignatureSet signer(final String value) {
	    setSigner(Url.parse(value));
	    return this;
	}
	@JsonDeserialize(using = HexDeserializer.class)
	public byte[] getTransactionHash() {
	    return transactionHash;
	}
	@JsonSerialize(using = HexSerializer.class)
	public void setTransactionHash(final byte[] value) {
	    this.transactionHash = value;
	}

	public SignatureSet transactionHash(final byte[] value) {
	    setTransactionHash(value);
	    return this;
	}
	public SignatureSet transactionHash(final String value) {
		try {
			setTransactionHash(io.accumulatenetwork.sdk.commons.codec.binary.Hex.decodeHex(value));
		} catch (io.accumulatenetwork.sdk.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}
	public Signature[] getSignatures() {
	    return signatures;
	}
	public void setSignatures(final Signature[] value) {
	    this.signatures = value;
	}

	public SignatureSet signatures(final Signature[] value) {
	    setSignatures(value);
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        marshaller.writeValue(1, type);
        if (!(this.vote == null)) {
            marshaller.writeValue(2, vote);
        }
        if (!(this.signer == null)) {
            marshaller.writeUrl(3, this.signer);
        }
        if (!(this.transactionHash == null || this.transactionHash.length == 0)) {
            marshaller.writeHash(4, this.transactionHash);
        }
        if (!(this.signatures == null)) {
            marshaller.writeValue(5, signatures);
        }
        return marshaller.array();
    }
}
