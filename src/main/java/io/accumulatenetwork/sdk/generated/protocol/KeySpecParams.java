package io.accumulatenetwork.sdk.generated.protocol;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.accumulatenetwork.sdk.protocol.Marhallable;
import io.accumulatenetwork.sdk.protocol.Url;
import io.accumulatenetwork.sdk.support.Marshaller;
import io.accumulatenetwork.sdk.support.serializers.HexDeserializer;
import io.accumulatenetwork.sdk.support.serializers.HexSerializer;
// UnionType: 
// UnionValue: 

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("KeySpecParams")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class KeySpecParams implements Marhallable {
	private byte[] keyHash;
	private Url delegate;

    //
	@JsonDeserialize(using = HexDeserializer.class)
	public byte[] getKeyHash() {
	    return keyHash;
	}
	@JsonSerialize(using = HexSerializer.class)
	public void setKeyHash(final byte[] value) {
	    this.keyHash = value;
	}

	public KeySpecParams keyHash(final byte[] value) {
	    setKeyHash(value);
	    return this;
	}
	public KeySpecParams keyHash(final String value) {
		try {
			setKeyHash(io.accumulatenetwork.sdk.commons.codec.binary.Hex.decodeHex(value));
		} catch (io.accumulatenetwork.sdk.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}
	public Url getDelegate() {
	    return delegate;
	}
	public void setDelegate(final Url value) {
	    this.delegate = value;
	}

	public KeySpecParams delegate(final Url value) {
	    setDelegate(value);
	    return this;
	}
	public KeySpecParams delegate(final String value) {
	    setDelegate(Url.parse(value));
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        if (!(this.keyHash == null || this.keyHash.length == 0)) {
            marshaller.writeBytes(1, this.keyHash);
        }
        if (!(this.delegate == null)) {
            marshaller.writeUrl(2, this.delegate);
        }
        return marshaller.array();
    }
}
