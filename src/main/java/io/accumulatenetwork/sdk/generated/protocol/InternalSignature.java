package io.accumulatenetwork.sdk.generated.protocol;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.accumulatenetwork.sdk.protocol.Signature;
import io.accumulatenetwork.sdk.support.Marshaller;
import io.accumulatenetwork.sdk.support.serializers.HexDeserializer;
import io.accumulatenetwork.sdk.support.serializers.HexSerializer;
// UnionType: SignatureType
// UnionValue: Internal

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("InternalSignature")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class InternalSignature implements Signature {
	public final SignatureType type = SignatureType.INTERNAL;
	private byte[] cause;
	private byte[] transactionHash;

    //
	@JsonDeserialize(using = HexDeserializer.class)
	public byte[] getCause() {
	    return cause;
	}
	@JsonSerialize(using = HexSerializer.class)
	public void setCause(final byte[] value) {
	    this.cause = value;
	}

	public InternalSignature cause(final byte[] value) {
	    setCause(value);
	    return this;
	}
	public InternalSignature cause(final String value) {
		try {
			setCause(io.accumulatenetwork.sdk.commons.codec.binary.Hex.decodeHex(value));
		} catch (io.accumulatenetwork.sdk.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}
	@JsonDeserialize(using = HexDeserializer.class)
	public byte[] getTransactionHash() {
	    return transactionHash;
	}
	@JsonSerialize(using = HexSerializer.class)
	public void setTransactionHash(final byte[] value) {
	    this.transactionHash = value;
	}

	public InternalSignature transactionHash(final byte[] value) {
	    setTransactionHash(value);
	    return this;
	}
	public InternalSignature transactionHash(final String value) {
		try {
			setTransactionHash(io.accumulatenetwork.sdk.commons.codec.binary.Hex.decodeHex(value));
		} catch (io.accumulatenetwork.sdk.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        marshaller.writeValue(1, type);
        if (!(this.cause == null || this.cause.length == 0)) {
            marshaller.writeHash(2, this.cause);
        }
        if (!(this.transactionHash == null || this.transactionHash.length == 0)) {
            marshaller.writeHash(3, this.transactionHash);
        }
        return marshaller.array();
    }
}
