package io.accumulatenetwork.sdk.generated.apiv2;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.accumulatenetwork.sdk.protocol.Marhallable;
import io.accumulatenetwork.sdk.protocol.Url;
import io.accumulatenetwork.sdk.support.Marshaller;
// UnionType: 
// UnionValue: 

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("SyntheticTransactionRequest")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SyntheticTransactionRequest implements Marhallable {
	private Url source;
	private Url destination;
	private long sequenceNumber;
	private boolean anchor;

    //
	public Url getSource() {
	    return source;
	}
	public void setSource(final Url value) {
	    this.source = value;
	}

	public SyntheticTransactionRequest source(final Url value) {
	    setSource(value);
	    return this;
	}
	public SyntheticTransactionRequest source(final String value) {
	    setSource(Url.parse(value));
	    return this;
	}
	public Url getDestination() {
	    return destination;
	}
	public void setDestination(final Url value) {
	    this.destination = value;
	}

	public SyntheticTransactionRequest destination(final Url value) {
	    setDestination(value);
	    return this;
	}
	public SyntheticTransactionRequest destination(final String value) {
	    setDestination(Url.parse(value));
	    return this;
	}
	public long getSequenceNumber() {
	    return sequenceNumber;
	}
	public void setSequenceNumber(final long value) {
	    this.sequenceNumber = value;
	}

	public SyntheticTransactionRequest sequenceNumber(final long value) {
	    setSequenceNumber(value);
	    return this;
	}
	public boolean getAnchor() {
	    return anchor;
	}
	public void setAnchor(final boolean value) {
	    this.anchor = value;
	}

	public SyntheticTransactionRequest anchor(final boolean value) {
	    setAnchor(value);
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        if (!(this.source == null)) {
            marshaller.writeUrl(1, this.source);
        }
        if (!(this.destination == null)) {
            marshaller.writeUrl(2, this.destination);
        }
        if (!(this.sequenceNumber == 0)) {
            marshaller.writeUint(3, this.sequenceNumber);
        }
        if (!(!this.anchor)) {
            marshaller.writeBool(4, this.anchor);
        }
        return marshaller.array();
    }
}
