package io.accumulatenetwork.sdk.generated.apiv2;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.accumulatenetwork.sdk.protocol.Marhallable;
import io.accumulatenetwork.sdk.protocol.TxID;
import io.accumulatenetwork.sdk.support.Marshaller;
import io.accumulatenetwork.sdk.support.serializers.HexDeserializer;
import io.accumulatenetwork.sdk.support.serializers.HexSerializer;

import java.time.Duration;
// UnionType: 
// UnionValue: 

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("TxnQuery")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class TxnQuery implements Marhallable {
	private boolean expand;
	private long height;
	private boolean scratch;
	private boolean prove;
	private byte[] txid;
	private TxID txIdUrl;
	private Duration wait;
	private boolean ignorePending;

    //
	public boolean getExpand() {
	    return expand;
	}
	public void setExpand(final boolean value) {
	    this.expand = value;
	}

	public TxnQuery expand(final boolean value) {
	    setExpand(value);
	    return this;
	}
	public long getHeight() {
	    return height;
	}
	public void setHeight(final long value) {
	    this.height = value;
	}

	public TxnQuery height(final long value) {
	    setHeight(value);
	    return this;
	}
	public boolean getScratch() {
	    return scratch;
	}
	public void setScratch(final boolean value) {
	    this.scratch = value;
	}

	public TxnQuery scratch(final boolean value) {
	    setScratch(value);
	    return this;
	}
	public boolean getProve() {
	    return prove;
	}
	public void setProve(final boolean value) {
	    this.prove = value;
	}

	public TxnQuery prove(final boolean value) {
	    setProve(value);
	    return this;
	}
	@JsonDeserialize(using = HexDeserializer.class)
	public byte[] getTxid() {
	    return txid;
	}
	@JsonSerialize(using = HexSerializer.class)
	public void setTxid(final byte[] value) {
	    this.txid = value;
	}

	public TxnQuery txid(final byte[] value) {
	    setTxid(value);
	    return this;
	}
	public TxnQuery txid(final String value) {
		try {
			setTxid(io.accumulatenetwork.sdk.commons.codec.binary.Hex.decodeHex(value));
		} catch (io.accumulatenetwork.sdk.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}
	public TxID getTxIdUrl() {
	    return txIdUrl;
	}
	public void setTxIdUrl(final TxID value) {
	    this.txIdUrl = value;
	}

	public TxnQuery txIdUrl(final TxID value) {
	    setTxIdUrl(value);
	    return this;
	}
	public Duration getWait() {
	    return wait;
	}
	public void setWait(final Duration value) {
	    this.wait = value;
	}

	public TxnQuery wait(final Duration value) {
	    setWait(value);
	    return this;
	}
	public boolean getIgnorePending() {
	    return ignorePending;
	}
	public void setIgnorePending(final boolean value) {
	    this.ignorePending = value;
	}

	public TxnQuery ignorePending(final boolean value) {
	    setIgnorePending(value);
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        if (!(!this.expand)) {
            marshaller.writeBool(1, this.expand);
        }
        if (!(this.height == 0)) {
            marshaller.writeUint(2, this.height);
        }
        if (!(!this.scratch)) {
            marshaller.writeBool(3, this.scratch);
        }
        if (!(!this.prove)) {
            marshaller.writeBool(4, this.prove);
        }
        if (!(this.txid == null || this.txid.length == 0)) {
            marshaller.writeBytes(5, this.txid);
        }
        if (!(this.txIdUrl == null)) {
            marshaller.writeTxid(6, this.txIdUrl);
        }
        if (!(this.wait == null)) {
            marshaller.writeDuration(7, this.wait);
        }
        if (!(!this.ignorePending)) {
            marshaller.writeBool(8, this.ignorePending);
        }
        return marshaller.array();
    }
}
