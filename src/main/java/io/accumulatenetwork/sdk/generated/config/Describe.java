package io.accumulatenetwork.sdk.generated.config;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.accumulatenetwork.sdk.protocol.Marhallable;
import io.accumulatenetwork.sdk.support.Marshaller;
// UnionType: 
// UnionValue: 

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("Describe")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Describe implements Marhallable {
	private NetworkType networkType;
	private String partitionId;
	private String localAddress;
	private Network network;

    //
	public NetworkType getNetworkType() {
	    return networkType;
	}
	public void setNetworkType(final NetworkType value) {
	    this.networkType = value;
	}

	public Describe networkType(final NetworkType value) {
	    setNetworkType(value);
	    return this;
	}
	public String getPartitionId() {
	    return partitionId;
	}
	public void setPartitionId(final String value) {
	    this.partitionId = value;
	}

	public Describe partitionId(final String value) {
	    setPartitionId(value);
	    return this;
	}
	public String getLocalAddress() {
	    return localAddress;
	}
	public void setLocalAddress(final String value) {
	    this.localAddress = value;
	}

	public Describe localAddress(final String value) {
	    setLocalAddress(value);
	    return this;
	}
	public Network getNetwork() {
	    return network;
	}
	public void setNetwork(final Network value) {
	    this.network = value;
	}

	public Describe network(final Network value) {
	    setNetwork(value);
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        if (!(this.networkType == null)) {
            marshaller.writeValue(1, networkType);
        }
        if (!(this.partitionId == null || this.partitionId.length() == 0)) {
            marshaller.writeString(2, this.partitionId);
        }
        if (!(this.localAddress == null || this.localAddress.length() == 0)) {
            marshaller.writeString(3, this.localAddress);
        }
        if (!(this.network == null)) {
            marshaller.writeValue(4, network);
        }
        return marshaller.array();
    }
}
