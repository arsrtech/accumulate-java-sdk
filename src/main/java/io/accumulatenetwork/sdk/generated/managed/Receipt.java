package io.accumulatenetwork.sdk.generated.managed;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.accumulatenetwork.sdk.protocol.Marhallable;
import io.accumulatenetwork.sdk.protocol.MerkleManager;
import io.accumulatenetwork.sdk.support.Marshaller;
import io.accumulatenetwork.sdk.support.serializers.HexDeserializer;
import io.accumulatenetwork.sdk.support.serializers.HexSerializer;
// UnionType: 
// UnionValue: 

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("Receipt")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Receipt implements Marhallable {
	private byte[] start;
	private int startIndex;
	private byte[] end;
	private int endIndex;
	private byte[] anchor;
	private ReceiptEntry[] entries;
	@JsonIgnore
	private MerkleManager manager;

    //
	@JsonDeserialize(using = HexDeserializer.class)
	public byte[] getStart() {
	    return start;
	}
	@JsonSerialize(using = HexSerializer.class)
	public void setStart(final byte[] value) {
	    this.start = value;
	}

	public Receipt start(final byte[] value) {
	    setStart(value);
	    return this;
	}
	public Receipt start(final String value) {
		try {
			setStart(io.accumulatenetwork.sdk.commons.codec.binary.Hex.decodeHex(value));
		} catch (io.accumulatenetwork.sdk.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}
	public int getStartIndex() {
	    return startIndex;
	}
	public void setStartIndex(final int value) {
	    this.startIndex = value;
	}

	public Receipt startIndex(final int value) {
	    setStartIndex(value);
	    return this;
	}
	@JsonDeserialize(using = HexDeserializer.class)
	public byte[] getEnd() {
	    return end;
	}
	@JsonSerialize(using = HexSerializer.class)
	public void setEnd(final byte[] value) {
	    this.end = value;
	}

	public Receipt end(final byte[] value) {
	    setEnd(value);
	    return this;
	}
	public Receipt end(final String value) {
		try {
			setEnd(io.accumulatenetwork.sdk.commons.codec.binary.Hex.decodeHex(value));
		} catch (io.accumulatenetwork.sdk.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}
	public int getEndIndex() {
	    return endIndex;
	}
	public void setEndIndex(final int value) {
	    this.endIndex = value;
	}

	public Receipt endIndex(final int value) {
	    setEndIndex(value);
	    return this;
	}
	@JsonDeserialize(using = HexDeserializer.class)
	public byte[] getAnchor() {
	    return anchor;
	}
	@JsonSerialize(using = HexSerializer.class)
	public void setAnchor(final byte[] value) {
	    this.anchor = value;
	}

	public Receipt anchor(final byte[] value) {
	    setAnchor(value);
	    return this;
	}
	public Receipt anchor(final String value) {
		try {
			setAnchor(io.accumulatenetwork.sdk.commons.codec.binary.Hex.decodeHex(value));
		} catch (io.accumulatenetwork.sdk.commons.codec.DecoderException e) {
			throw new RuntimeException(e);
		}
	    return this;
	}
	public ReceiptEntry[] getEntries() {
	    return entries;
	}
	public void setEntries(final ReceiptEntry[] value) {
	    this.entries = value;
	}

	public Receipt entries(final ReceiptEntry[] value) {
	    setEntries(value);
	    return this;
	}
	@JsonIgnore
	public MerkleManager getmanager() {
	    return manager;
	}
	public void setmanager(final MerkleManager value) {
	    this.manager = value;
	}

	public Receipt manager(final MerkleManager value) {
	    setmanager(value);
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        if (!(this.start == null || this.start.length == 0)) {
            marshaller.writeBytes(1, this.start);
        }
        if (!(this.startIndex == 0)) {
            marshaller.writeInt(2, this.startIndex);
        }
        if (!(this.end == null || this.end.length == 0)) {
            marshaller.writeBytes(3, this.end);
        }
        if (!(this.endIndex == 0)) {
            marshaller.writeInt(4, this.endIndex);
        }
        if (!(this.anchor == null || this.anchor.length == 0)) {
            marshaller.writeBytes(5, this.anchor);
        }
        if (!(this.entries == null)) {
            marshaller.writeValue(6, entries);
        }
        return marshaller.array();
    }
}
