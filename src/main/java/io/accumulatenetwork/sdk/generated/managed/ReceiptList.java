package io.accumulatenetwork.sdk.generated.managed;

/**
    GENERATED BY go run ./tools/cmd/gen-api. DO NOT EDIT.
**/

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.accumulatenetwork.sdk.generated.apiv2.MerkleState;
import io.accumulatenetwork.sdk.protocol.Marhallable;
import io.accumulatenetwork.sdk.support.Marshaller;
import io.accumulatenetwork.sdk.support.serializers.Hex2DDeserializer;
import io.accumulatenetwork.sdk.support.serializers.Hex2DSerializer;
// UnionType: 
// UnionValue: 

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeName("ReceiptList")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ReceiptList implements Marhallable {
	private MerkleState merkleState;
	private byte[][] elements;
	private Receipt receipt;
	private Receipt continuedReceipt;

    //
	public MerkleState getMerkleState() {
	    return merkleState;
	}
	public void setMerkleState(final MerkleState value) {
	    this.merkleState = value;
	}

	public ReceiptList merkleState(final MerkleState value) {
	    setMerkleState(value);
	    return this;
	}
	@JsonDeserialize(using = Hex2DDeserializer.class)
	public byte[][] getElements() {
	    return elements;
	}
	@JsonSerialize(using = Hex2DSerializer.class)
	public void setElements(final byte[][] value) {
	    this.elements = value;
	}

	public ReceiptList elements(final byte[][] value) {
	    setElements(value);
	    return this;
	}
	public Receipt getReceipt() {
	    return receipt;
	}
	public void setReceipt(final Receipt value) {
	    this.receipt = value;
	}

	public ReceiptList receipt(final Receipt value) {
	    setReceipt(value);
	    return this;
	}
	public Receipt getContinuedReceipt() {
	    return continuedReceipt;
	}
	public void setContinuedReceipt(final Receipt value) {
	    this.continuedReceipt = value;
	}

	public ReceiptList continuedReceipt(final Receipt value) {
	    setContinuedReceipt(value);
	    return this;
	}

    public byte[] marshalBinary() {
        final var marshaller = new Marshaller();
        if (!(this.merkleState == null)) {
            marshaller.writeValue(1, merkleState);
        }
        if (!(this.elements == null || this.elements.length == 0)) {
            marshaller.writeBytes(2, this.elements);
        }
        if (!(this.receipt == null)) {
            marshaller.writeValue(3, receipt);
        }
        if (!(this.continuedReceipt == null)) {
            marshaller.writeValue(4, continuedReceipt);
        }
        return marshaller.array();
    }
}
